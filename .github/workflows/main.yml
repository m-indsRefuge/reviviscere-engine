name: Reviviscere Engine CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read

jobs:
  changes:
    name: Detect Changed Agents
    runs-on: ubuntu-latest
    outputs:
      agents: ${{ steps.determine-agents.outputs.agents || '[]' }}
    steps:
      - name: Checkout full repository history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Determine changed agents from file list
        id: determine-agents
        run: |
          cortex_changed=false
          watchtower_changed=false
          changed_agents="[]"

          echo "--- Files Changed This Push ---"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          echo "-------------------------------"

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == agents/cortex/* ]]; then
              cortex_changed=true
            fi
            if [[ "$file" == agents/watchtower/* ]]; then
              watchtower_changed=true
            fi
          done

          if [[ "$cortex_changed" == true && "$watchtower_changed" == true ]]; then
            changed_agents='["cortex", "watchtower"]'
          elif [[ "$cortex_changed" == true ]]; then
            changed_agents='["cortex"]'
          elif [[ "$watchtower_changed" == true ]]; then
            changed_agents='["watchtower"]'
          fi

          echo "Determined agents to test: $changed_agents"
          echo "agents=$changed_agents" >> $GITHUB_OUTPUT

  e2e-test:
    name: Run E2E Tests for ${{ matrix.agent }}
    needs: changes
    if: ${{ needs.changes.outputs.agents != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        agent: ${{ fromJson(needs.changes.outputs.agents) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Docker Compose environment
        env:
          OLLAMA_MODEL_NAME: tinyllama
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: docker compose up -d --wait

      - name: Show Docker Compose logs on failure
        if: failure()
        run: docker compose logs

      - name: Extract ngrok Tunnel URL
        id: get_url
        run: echo "NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')" >> $GITHUB_OUTPUT

      - name: Display ngrok URL
        run: echo "Tunnel is live at ${{ steps.get_url.outputs.NGROK_URL }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm --prefix ./agents/${{ matrix.agent }} ci
          npm install -g wrangler

      - name: Deploy to Cloudflare Preview and Capture Output
        run: wrangler deploy --config ./agents/${{ matrix.agent }}/wrangler.toml --var CORTEX_MODEL_URL:${{ steps.get_url.outputs.NGROK_URL }} --var WATCHTOWER_MODEL_URL:${{ steps.get_url.outputs.NGROK_URL }} > deployment-output.txt
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Create Test Environment File
        run: |
          URL=$(grep -o 'https://[^ ]*workers.dev' deployment-output.txt | tr -d '\r')
          echo "BASE_URL=$URL" > ./agents/${{ matrix.agent }}/.test.env

      - name: Run Vitest E2E tests against Preview
        working-directory: ./agents/${{ matrix.agent }}
        env:
          API_KEY: ${{ secrets.API_KEY }}
          CI: "true"
        run: npx vitest run --env .test.env

      - name: Teardown Docker Compose environment
        if: always()
        run: docker compose down
  
  deploy-production-watchtower:
    name: Deploy Watchtower to Production
    runs-on: ubuntu-latest
    needs: [changes, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(fromJson(needs.changes.outputs.agents), 'watchtower')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Watchtower Agent
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: deploy --config ./agents/watchtower/wrangler.toml

  deploy-production-cortex:
    name: Deploy Cortex to Production
    runs-on: ubuntu-latest
    needs: [changes, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(fromJson(needs.changes.outputs.agents), 'cortex')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Cortex Agent
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: deploy --config ./agents/cortex/wrangler.toml